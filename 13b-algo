#include <stdio.h>
#include <stdlib.h>
int max(int a, int b){
return (a>b) ? a : b;
}
int t[100][100], v[100], w[100], n, m, i, j;
int knap(int i, int j){
if (t[i][j]==-1){
if (j<w[i])
t[i][j] = knap(i-1,j);
else
t[i][j] = max(knap(i-1,j),v[i]+knap(i-1,j-w[i]));
}
return t[i][j];
}
void main(){
printf("No. of Items>> ");
scanf("%d",&n);
printf("Sack Capacity>> ");
scanf("%d",&m);
printf("Weight\tValue\n");
for(i=1;i<n+1;i++){
scanf("%d\t%d",&w[i],&v[i]);
}
for(i=0;i<n+1;i++){
for(j=0;j<m+1;j++){
if (i==0||j==0)
t[i][j]=0;
else
t[i][j]=-1;
}
}
printf("Maximum Value: %d\n",knap(n,m));
for(int i=0;i<n+1;i++)
{
for(int j=0;j<m+1;j++)
printf("%d ",t[i][j]);
printf("\n");
}
printf("Composition:\n");
for(i=n;i>0;i--){
if (t[i][m] != t[i-1][m]){
printf("%d ",i);
m = m-w[i];
}
}
printf("\n");
}
//plotter
// plotter.c
#include <stdio.h>
#include <stdlib.h>

int t[100][100], v[100], w[100], n, m, i, j, count;

int max(int a, int b) {
    return (a > b) ? a : b;
}

int knap(int i, int j) {
    count++;  // Increment count for each recursive call
    if (t[i][j] == -1) {
        if (j < w[i]) {
            t[i][j] = knap(i - 1, j);
        } else {
            t[i][j] = max(knap(i - 1, j), v[i] + knap(i - 1, j - w[i]));
        }
    }
    return t[i][j];
}

void run() {
    count = 0;
    printf("Number of items: ");
    scanf("%d", &n);
    printf("Sack capacity: ");
    scanf("%d", &m);
    printf("Weight\tValue\n");
    for (i = 1; i <= n; i++) {
        scanf("%d\t%d", &w[i], &v[i]);
    }

    // Initialize the memoization table
    for (i = 0; i <= n; i++) {
        for (j = 0; j <= m; j++) {
            if (i == 0 || j == 0) {
                t[i][j] = 0;
            } else {
                t[i][j] = -1;
            }
        }
    }

    printf("Max value: %d\n", knap(n, m));
    
    // Print the memoization table
    for (i = 0; i <= n; i++) {
        for (j = 0; j <= m; j++) {
            printf("%d ", t[i][j]);
        }
        printf("\n");
    }

    // Print the composition of the knapsack
    printf("Composition:\n");
    for (i = n; i > 0; i--) {
        if (t[i][m] != t[i - 1][m]) {
            printf("%d ", i);
            m = m - w[i];
        }
    }
    printf("\n");

    // Log the number of recursive calls for plotting
    FILE *f1;
    f1 = fopen("knapsackgraph.txt", "a");
    fprintf(f1, "%d\t%d\n", n, count);
    fclose(f1);
}

int main() {
    int ch;
    while (1) {
        printf("Enter choice 1 to continue and 0 to exit\n");
        scanf("%d", &ch);
        if (ch == 0) {
            break;
        } else if (ch == 1) {
            run();
        }
    }
    return 0;
}

#include <stdio.h>
#include <stdlib.h>

#define MAX 100

// Global variables
int graph[MAX][MAX];
int visited[MAX];
int bfsCount = 0, cyclic = 0;
int count = 0; // To count how many vertices are visited
int orderCount = 0; // To count the number of operations in BFS

// Function to perform BFS traversal
void bfs(int n, int start) {
    int queue[MAX], parent[MAX];
    int rear = -1, front = -1, i, parentNode;

    for (i = 0; i < n; i++) {
        visited[i] = 0;
    }

    visited[start] = 1;
    count++;
    queue[++rear] = start;
    parent[rear] = -1;

    while (rear != front) {
        start = queue[++front];
        parentNode = parent[front];
        printf("-->%c", start + 65);

        for (i = 0; i < n; i++) {
            orderCount++;
            if (i != parentNode && graph[start][i] && visited[i]) {
                cyclic = 1;
            }
            if (graph[start][i] && !visited[i]) {
                queue[++rear] = i;
                parent[rear] = start;
                visited[i] = 1;
                count++;
            }
        }
    }
}

// Function to handle user input and perform BFS
void tester() {
    int n, i, j, start;
    printf("Enter the number of nodes in the graph:\n");
    scanf("%d", &n);

    printf("Enter the Adjacency Matrix:\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    printf("The Adjacency Matrix:\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            printf("%d ", graph[i][j]);
        }
        printf("\n");
    }

    bfsCount = 0;
    cyclic = 0;
    count = 0;
    orderCount = 0;

    printf("Breadth First Search Traversal:\n");
    bfsCount++;
    bfs(n, 0);

    if (count == n) {
        printf("\nGraph is connected.\n");
    } else {
        printf("\nThe graph is not connected.\n");
        start = 1;
        while (count != n) {
            if (visited[start] != 1) {
                bfsCount++;
                bfs(n, start);
                printf("\n");
            }
            start++;
        }
    }

    printf("\nThe number of components in the graph is %d\n", bfsCount);
    if (cyclic) {
        printf("\nThe graph is cyclic\n");
    } else {
        printf("\nThe graph is acyclic\n");
    }
}

// Function to plot BFS results for best and worst cases
void ploter(int k) {
    FILE *f1 = fopen("BFSBEST.txt", "a");
    FILE *f2 = fopen("BFSWORST.txt", "a");

    int v, start;
    for (int i = 1; i <= 10; i++) {
        v = i;
        // Initialize graph matrix to zero
        for (int x = 0; x < v; x++) {
            for (int y = 0; y < v; y++) {
                graph[x][y] = 0;
            }
        }

        if (k == 0) { // Best case: Complete graph
            for (int x = 0; x < v; x++) {
                for (int y = 0; y < v; y++) {
                    if (x != y) {
                        graph[x][y] = 1;
                    }
                }
            }
        }

        if (k == 1) { // Worst case: Path graph
            for (int x = 0; x < v - 1; x++) {
                graph[x][x + 1] = 1;
                graph[x + 1][x] = 1; // Ensure undirected graph
            }
        }

        bfsCount = 0;
        cyclic = 0;
        count = 0;
        orderCount = 0;

        bfsCount++;
        bfs(v, 0);

        if (count != v) {
            start = 1;
            while (count != v) {
                if (visited[start] != 1) {
                    bfsCount++;
                    bfs(v, start);
                }
                start++;
            }
        }

        if (k == 0) {
            fprintf(f1, "%d\t%d\n", v, orderCount);
        } else {
            fprintf(f2, "%d\t%d\n", v, orderCount);
        }
    }

    fclose(f1);
    fclose(f2);
}

int main() {
    int key;
    while (1) {
        printf("ENTER THE CHOICE\n1. TO TEST\n2. TO PLOT\n0. TO EXIT\n");
        scanf("%d", &key);

        switch (key) {
            case 1:
                tester();
                break;
            case 2:
                for (int i = 0; i < 2; i++) {
                    ploter(i);
                }
                break;
            case 0:
                return 0;
            default:
                printf("Invalid choice. Exiting.\n");
                return 1;
        }
    }
}
